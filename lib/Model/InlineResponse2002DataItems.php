<?php
/**
 * InlineResponse2002DataItems
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Teletype Public API
 *
 * ## Общая информация Вы можете использовать данную документацию для ознакомления с методами API. Описание произведено в формате [**Swagger 3.0**](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md). Для генерации базового кода для работы с API на удобном для вас языке программирования воспользуйтесь утилитой [**Swagger Codegen**](https://swagger.io/swagger-codegen/) или online сервисом [**Swagger Editor**](https://editor.swagger.io/).  По всем вопросам работы с API обращайтесь к нам по email: <a href=\"mailto:p@teletype.app\">p@teletype.app</a></li>
 *
 * OpenAPI spec version: 1.0.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.16
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse2002DataItems Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2002DataItems implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_2_data_items';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'is_online' => 'bool',
'last_online_at' => 'string',
'phone_is_locked' => 'bool',
'email_is_locked' => 'bool',
'banned' => 'bool',
'average_rate' => 'float',
'first_message_at' => 'string',
'last_message_at' => 'string',
'name' => 'string',
'avatar' => 'string',
'avatar_original' => 'string',
'color' => 'string',
'animal' => 'string',
'phone' => 'string',
'email' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'is_online' => null,
'last_online_at' => null,
'phone_is_locked' => null,
'email_is_locked' => null,
'banned' => null,
'average_rate' => null,
'first_message_at' => null,
'last_message_at' => null,
'name' => null,
'avatar' => null,
'avatar_original' => null,
'color' => null,
'animal' => null,
'phone' => null,
'email' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'is_online' => 'isOnline',
'last_online_at' => 'lastOnlineAt',
'phone_is_locked' => 'phoneIsLocked',
'email_is_locked' => 'emailIsLocked',
'banned' => 'banned',
'average_rate' => 'averageRate',
'first_message_at' => 'firstMessageAt',
'last_message_at' => 'lastMessageAt',
'name' => 'name',
'avatar' => 'avatar',
'avatar_original' => 'avatarOriginal',
'color' => 'color',
'animal' => 'animal',
'phone' => 'phone',
'email' => 'email'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'is_online' => 'setIsOnline',
'last_online_at' => 'setLastOnlineAt',
'phone_is_locked' => 'setPhoneIsLocked',
'email_is_locked' => 'setEmailIsLocked',
'banned' => 'setBanned',
'average_rate' => 'setAverageRate',
'first_message_at' => 'setFirstMessageAt',
'last_message_at' => 'setLastMessageAt',
'name' => 'setName',
'avatar' => 'setAvatar',
'avatar_original' => 'setAvatarOriginal',
'color' => 'setColor',
'animal' => 'setAnimal',
'phone' => 'setPhone',
'email' => 'setEmail'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'is_online' => 'getIsOnline',
'last_online_at' => 'getLastOnlineAt',
'phone_is_locked' => 'getPhoneIsLocked',
'email_is_locked' => 'getEmailIsLocked',
'banned' => 'getBanned',
'average_rate' => 'getAverageRate',
'first_message_at' => 'getFirstMessageAt',
'last_message_at' => 'getLastMessageAt',
'name' => 'getName',
'avatar' => 'getAvatar',
'avatar_original' => 'getAvatarOriginal',
'color' => 'getColor',
'animal' => 'getAnimal',
'phone' => 'getPhone',
'email' => 'getEmail'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_online'] = isset($data['is_online']) ? $data['is_online'] : null;
        $this->container['last_online_at'] = isset($data['last_online_at']) ? $data['last_online_at'] : null;
        $this->container['phone_is_locked'] = isset($data['phone_is_locked']) ? $data['phone_is_locked'] : null;
        $this->container['email_is_locked'] = isset($data['email_is_locked']) ? $data['email_is_locked'] : null;
        $this->container['banned'] = isset($data['banned']) ? $data['banned'] : null;
        $this->container['average_rate'] = isset($data['average_rate']) ? $data['average_rate'] : null;
        $this->container['first_message_at'] = isset($data['first_message_at']) ? $data['first_message_at'] : null;
        $this->container['last_message_at'] = isset($data['last_message_at']) ? $data['last_message_at'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['avatar'] = isset($data['avatar']) ? $data['avatar'] : null;
        $this->container['avatar_original'] = isset($data['avatar_original']) ? $data['avatar_original'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['animal'] = isset($data['animal']) ? $data['animal'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Идентификатор клиента
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_online
     *
     * @return bool
     */
    public function getIsOnline()
    {
        return $this->container['is_online'];
    }

    /**
     * Sets is_online
     *
     * @param bool $is_online Признак того, что клиент сейчас онлан
     *
     * @return $this
     */
    public function setIsOnline($is_online)
    {
        $this->container['is_online'] = $is_online;

        return $this;
    }

    /**
     * Gets last_online_at
     *
     * @return string
     */
    public function getLastOnlineAt()
    {
        return $this->container['last_online_at'];
    }

    /**
     * Sets last_online_at
     *
     * @param string $last_online_at Время последнего присутствия онлайн
     *
     * @return $this
     */
    public function setLastOnlineAt($last_online_at)
    {
        $this->container['last_online_at'] = $last_online_at;

        return $this;
    }

    /**
     * Gets phone_is_locked
     *
     * @return bool
     */
    public function getPhoneIsLocked()
    {
        return $this->container['phone_is_locked'];
    }

    /**
     * Sets phone_is_locked
     *
     * @param bool $phone_is_locked Признак блокировки телефона
     *
     * @return $this
     */
    public function setPhoneIsLocked($phone_is_locked)
    {
        $this->container['phone_is_locked'] = $phone_is_locked;

        return $this;
    }

    /**
     * Gets email_is_locked
     *
     * @return bool
     */
    public function getEmailIsLocked()
    {
        return $this->container['email_is_locked'];
    }

    /**
     * Sets email_is_locked
     *
     * @param bool $email_is_locked Признак  блокировки Email
     *
     * @return $this
     */
    public function setEmailIsLocked($email_is_locked)
    {
        $this->container['email_is_locked'] = $email_is_locked;

        return $this;
    }

    /**
     * Gets banned
     *
     * @return bool
     */
    public function getBanned()
    {
        return $this->container['banned'];
    }

    /**
     * Sets banned
     *
     * @param bool $banned Признак того, что клиент заблокирован
     *
     * @return $this
     */
    public function setBanned($banned)
    {
        $this->container['banned'] = $banned;

        return $this;
    }

    /**
     * Gets average_rate
     *
     * @return float
     */
    public function getAverageRate()
    {
        return $this->container['average_rate'];
    }

    /**
     * Sets average_rate
     *
     * @param float $average_rate Средний рейтинг клиента
     *
     * @return $this
     */
    public function setAverageRate($average_rate)
    {
        $this->container['average_rate'] = $average_rate;

        return $this;
    }

    /**
     * Gets first_message_at
     *
     * @return string
     */
    public function getFirstMessageAt()
    {
        return $this->container['first_message_at'];
    }

    /**
     * Sets first_message_at
     *
     * @param string $first_message_at Время первого сообщения клиента
     *
     * @return $this
     */
    public function setFirstMessageAt($first_message_at)
    {
        $this->container['first_message_at'] = $first_message_at;

        return $this;
    }

    /**
     * Gets last_message_at
     *
     * @return string
     */
    public function getLastMessageAt()
    {
        return $this->container['last_message_at'];
    }

    /**
     * Sets last_message_at
     *
     * @param string $last_message_at Время последнего сообщения клиента
     *
     * @return $this
     */
    public function setLastMessageAt($last_message_at)
    {
        $this->container['last_message_at'] = $last_message_at;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Имя клиента
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets avatar
     *
     * @return string
     */
    public function getAvatar()
    {
        return $this->container['avatar'];
    }

    /**
     * Sets avatar
     *
     * @param string $avatar Ссылка на превью аватара клиента
     *
     * @return $this
     */
    public function setAvatar($avatar)
    {
        $this->container['avatar'] = $avatar;

        return $this;
    }

    /**
     * Gets avatar_original
     *
     * @return string
     */
    public function getAvatarOriginal()
    {
        return $this->container['avatar_original'];
    }

    /**
     * Sets avatar_original
     *
     * @param string $avatar_original Ссылка на оригинальный размер аватара клиента
     *
     * @return $this
     */
    public function setAvatarOriginal($avatar_original)
    {
        $this->container['avatar_original'] = $avatar_original;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string $color Цвет
     *
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets animal
     *
     * @return string
     */
    public function getAnimal()
    {
        return $this->container['animal'];
    }

    /**
     * Sets animal
     *
     * @param string $animal Животное
     *
     * @return $this
     */
    public function setAnimal($animal)
    {
        $this->container['animal'] = $animal;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone Телефон
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
